{"name": "test_demo_exp[New York-New Delhi-23/07/2023]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: element is not attached to the page document\n  (Session info: chrome=110.0.5481.77); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nStacktrace:\n#0 0x55a19fdb7d93 <unknown>\n#1 0x55a19fb862d7 <unknown>\n#2 0x55a19fb898d3 <unknown>\n#3 0x55a19fb89642 <unknown>\n#4 0x55a19fb8995c <unknown>\n#5 0x55a19fbbccfe <unknown>\n#6 0x55a19fbe65f2 <unknown>\n#7 0x55a19fbb7873 <unknown>\n#8 0x55a19fbe681e <unknown>\n#9 0x55a19fbfe619 <unknown>\n#10 0x55a19fbe6353 <unknown>\n#11 0x55a19fbb5e40 <unknown>\n#12 0x55a19fbb7038 <unknown>\n#13 0x55a19fe0b8be <unknown>\n#14 0x55a19fe0f8f0 <unknown>\n#15 0x55a19fdeff90 <unknown>\n#16 0x55a19fe10b7d <unknown>\n#17 0x55a19fde1578 <unknown>\n#18 0x55a19fe35348 <unknown>\n#19 0x55a19fe354d6 <unknown>\n#20 0x55a19fe4f341 <unknown>\n#21 0x7fc8b3d75609 start_thread", "trace": "self = <test_cases.test_demo.TestDemo object at 0x1062fde90>\ngoing_from = 'New York', going_to = 'New Delhi', date = '23/07/2023'\n\n    @pytest.mark.parametrize(\"going_from, going_to, date\", flights)\n    def test_demo_exp(self, going_from, going_to, date):\n        self.lp = LaunchPage(self.driver)\n>       sf = self.lp.search_flights(going_from, going_to, date)\n\ntest_cases/test_demo.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/launching_page.py:74: in search_flights\n    self.going_to(going_to)\npages/launching_page.py:55: in going_to\n    if \"New York (JFK)\" in result.text:\nvenv/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:90: in text\n    return self._execute(Command.GET_ELEMENT_TEXT)[\"value\"]\nvenv/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nvenv/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:346: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x105b90490>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: element is n...wn>\\\\n#19 0x55a19fe354d6 \\\\u003Cunknown>\\\\n#20 0x55a19fe4f341 \\\\u003Cunknown>\\\\n#21 0x7fc8b3d75609 start_thread\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: element is not attached to the page document\nE         (Session info: chrome=110.0.5481.77); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nE       Stacktrace:\nE       #0 0x55a19fdb7d93 <unknown>\nE       #1 0x55a19fb862d7 <unknown>\nE       #2 0x55a19fb898d3 <unknown>\nE       #3 0x55a19fb89642 <unknown>\nE       #4 0x55a19fb8995c <unknown>\nE       #5 0x55a19fbbccfe <unknown>\nE       #6 0x55a19fbe65f2 <unknown>\nE       #7 0x55a19fbb7873 <unknown>\nE       #8 0x55a19fbe681e <unknown>\nE       #9 0x55a19fbfe619 <unknown>\nE       #10 0x55a19fbe6353 <unknown>\nE       #11 0x55a19fbb5e40 <unknown>\nE       #12 0x55a19fbb7038 <unknown>\nE       #13 0x55a19fe0b8be <unknown>\nE       #14 0x55a19fe0f8f0 <unknown>\nE       #15 0x55a19fdeff90 <unknown>\nE       #16 0x55a19fe10b7d <unknown>\nE       #17 0x55a19fde1578 <unknown>\nE       #18 0x55a19fe35348 <unknown>\nE       #19 0x55a19fe354d6 <unknown>\nE       #20 0x55a19fe4f341 <unknown>\nE       #21 0x7fc8b3d75609 start_thread\n\nvenv/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:245: StaleElementReferenceException"}, "attachments": [{"name": "test_demo_exp[New York-New Delhi-23/07/2023]", "source": "e087753a-7b20-42f0-a687-1087a0d892c7-attachment.png", "type": "image/png"}], "parameters": [{"name": "going_from", "value": "'New York'"}, {"name": "going_to", "value": "'New Delhi'"}, {"name": "date", "value": "'23/07/2023'"}], "start": 1689604171984, "stop": 1689604177550, "uuid": "7452a92a-afc8-4554-8fbb-2a20a33c6f3e", "historyId": "cce13e395db71bf61d5444024e7ac862", "testCaseId": "59cc2dece885c6726f86d371c4917136", "fullName": "test_cases.test_demo.TestDemo#test_demo_exp", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('setup')"}, {"name": "parentSuite", "value": "test_cases"}, {"name": "suite", "value": "test_demo"}, {"name": "subSuite", "value": "TestDemo"}, {"name": "host", "value": "MacBook-Pro-1111.local"}, {"name": "thread", "value": "4182-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_cases.test_demo"}]}